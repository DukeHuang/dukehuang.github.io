<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Filtering and sorting persistent data in SwiftData</title>
      <link href="/2024/01/17/Filtering-and-sorting-persistent-data-in-SwiftData/"/>
      <url>/2024/01/17/Filtering-and-sorting-persistent-data-in-SwiftData/</url>
      
        <content type="html"><![CDATA[<p>Manage data store presentation using predicates and dynamic queries.</p><p><a href="https://developer.apple.com/documentation/swiftdata/filtering-and-sorting-persistent-data">https://developer.apple.com/documentation/swiftdata/filtering-and-sorting-persistent-data</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SwiftData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final in Swift</title>
      <link href="/2024/01/17/final-in-Swift/"/>
      <url>/2024/01/17/final-in-Swift/</url>
      
        <content type="html"><![CDATA[<p>首先，看官方的文档</p><p><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations#Declaration-Modifiers">https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations#Declaration-Modifiers</a></p><p>final<br>Apply this modifier to a class or to a property, method, or subscript member of a class. It’s applied to a class to indicate that the class can’t be subclassed. It’s applied to a property, method, or subscript of a class to indicate that a class member can’t be overridden in any subclass. For an example of how to use the final attribute, see Preventing Overrides.</p><p>该修饰符用于修饰类或类中的属性、方法以及下标。如果用它修饰一个类，那么这个类不能被继承。如果用它修饰类中的属性、方法或下标，那么它们不能在子类中被重写。</p><p>这样就延伸了一个学习范围</p><h2 id="声明修饰符"><a href="#声明修饰符" class="headerlink" title="声明修饰符"></a>声明修饰符</h2><p>Declaration Modifiers<br>声明修饰符都是关键字或上下文相关的关键字，可以修改一个声明的行为或者含义。可以在声明的特性（如果存在）和引入该声明的关键字之间，利用声明修饰符的关键字或上下文相关的关键字指定一个声明修饰符。</p><p>class<br>dynamic<br>final<br>lazy<br>optional<br>required<br>static<br>unowned<br>unowned(safe)<br>unowned(unsafe)<br>weak</p><h2 id="访问控制级别"><a href="#访问控制级别" class="headerlink" title="访问控制级别"></a>访问控制级别</h2><p>容易和声明修饰符搞混<br>Access Control Levels<br><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Access-Control-Levels">https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Access-Control-Levels</a></p><p>Swift 提供了五个级别的访问控制：open、public、internal、file private 和 private。可以使用以下任意一种访问级别修饰符来指定声明的访问级别。访问控制在 访问控制 中有详细讨论。</p>]]></content>
      
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让自己去学鸿蒙，感觉就像喂自己吃屎一样</title>
      <link href="/2024/01/17/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%AD%A6%E9%B8%BF%E8%92%99%EF%BC%8C%E6%84%9F%E8%A7%89%E5%B0%B1%E5%83%8F%E5%96%82%E8%87%AA%E5%B7%B1%E5%90%83%E5%B1%8E%E4%B8%80%E6%A0%B7/"/>
      <url>/2024/01/17/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%AD%A6%E9%B8%BF%E8%92%99%EF%BC%8C%E6%84%9F%E8%A7%89%E5%B0%B1%E5%83%8F%E5%96%82%E8%87%AA%E5%B7%B1%E5%90%83%E5%B1%8E%E4%B8%80%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<p>最近公司移动端iOS需求萎缩，整个iOS小组的3个人后续都有可能转到鸿蒙开发上来。这就让我很难受，我不是很认可华为的价值观，他们对技术的尊重不够。本来前期就是一个套壳安卓的产品，非得说是自主研发，同时自己也一直很排斥他们的爱国生意。所以，无论如何，自己是不会去学鸿蒙的，让我去觉简直是浪费生命。</p><p>我就想在SwiftUI一条路走到黑，后续就想把这块做到最顶尖后，去想着在苹果生态里去变现。</p><p>Fuck 鸿蒙！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SwiftData in SwfitUI</title>
      <link href="/2024/01/16/SwiftData-in-SwfitUI/"/>
      <url>/2024/01/16/SwiftData-in-SwfitUI/</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftData的常规用法"><a href="#SwiftData的常规用法" class="headerlink" title="SwiftData的常规用法"></a>SwiftData的常规用法</h1><h2 id="1-首先定义Schema，用-Model"><a href="#1-首先定义Schema，用-Model" class="headerlink" title="1. 首先定义Schema，用@Model"></a>1. 首先定义Schema，用@Model</h2><p>一点说明，我在看WWDC2023中的关于SwiftData的课程时，他们多次提到了Schema这个单词，这其实是从数据库中引入的一个名词，它用于定义数据库中数据结构的元数据集合，描述了数据库中的表、字段、关键字、索引等信息。我们可以翻译成数据库模式或者数据库结构。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Model </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wubi</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实@Model也是一个宏，主要是将我们的类型修改成PersistentModel类型，来满足底层数据库Sqlite3的使用，有点类似于Coredata，说白了，SwiftData也是在这些基础的存储架构上进行的封装。</p><h2 id="2-拿到modelContainer，通过修改器来设置App的模型容器和模型上下文"><a href="#2-拿到modelContainer，通过修改器来设置App的模型容器和模型上下文" class="headerlink" title="2. 拿到modelContainer，通过修改器来设置App的模型容器和模型上下文"></a>2. 拿到modelContainer，通过修改器来设置App的模型容器和模型上下文</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Scene</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">modelContainer</span>(<span class="keyword">_</span> <span class="params">container</span>: <span class="type">ModelContainer</span>) -&gt; <span class="keyword">some</span> <span class="type">Scene</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Sets the model container and associated model context in this scene’s environment.<br> 设置此场景环境中的模型容器和关联模型上下文。</p><p>The environment’s <code>EnvironmentValues/modelContext</code> property will be<br>assigned a new context associated with this container. All implicit<br>model context operations in this scene, such as <code>Query</code><br>properties, will use the environment’s context.</p><p>环境的 <code>EnvironmentValues/modelContext</code> 属性将被分配给与此容器关联的新上下文。<br>属性分配一个与此容器关联的新上下文。此场景中的所有隐式<br>模型上下文操作（如 <code>Query</code><br>属性，都将使用环境的上下文。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WubiMacApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> modelContainer: <span class="type">ModelContainer</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            modelContainer <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ModelContainer</span>(for: <span class="type">Wubi</span>.<span class="keyword">self</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">&quot;Could not initialize ModelContainer&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">WubiMacContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .modelContainer(modelContainer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的ModelContainer的作用是修改App的Schema和模型存储配置(Model storage configuration)<br>它的定义如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">swift</span> <span class="number">5.9</span>)</span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">macOS</span> <span class="number">14</span>, <span class="keyword">iOS</span> <span class="number">17</span>, <span class="keyword">tvOS</span> <span class="number">17</span>, <span class="keyword">watchOS</span> <span class="number">10</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelContainer</span> : <span class="title class_">Equatable</span>, @<span class="title class_">unchecked</span> <span class="title class_">Sendable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// An object that maps model classes to data in the model store, and helps with the migration of that data</span></span><br><span class="line">    <span class="comment">/// between releases.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">let</span> schema: <span class="type">Schema</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">///An interface for describing the evolution of a schema and how to migrate between specific versions.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">let</span> migrationPlan: (<span class="type">SchemaMigrationPlan</span>.<span class="keyword">Type</span>)<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A type that describes the configuration of an app&#x27;s schema or specific group of models.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> configurations: <span class="type">Set</span>&lt;<span class="type">ModelConfiguration</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// An object that enables you to fetch, insert, and delete models, and save any changes to disk.</span></span><br><span class="line">    <span class="meta">@MainActor</span> <span class="keyword">public</span> <span class="keyword">var</span> mainContext: <span class="type">ModelContext</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether two values are equal.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Equality is the inverse of inequality. For any values `a` and `b`,</span></span><br><span class="line">    <span class="comment">/// `a == b` implies that `a != b` is `false`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A value to compare.</span></span><br><span class="line">    <span class="comment">///   - rhs: Another value to compare.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">ModelContainer</span>, <span class="params">rhs</span>: <span class="type">ModelContainer</span>) -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">for</span> <span class="params">forTypes</span>: <span class="type">PersistentModel</span>.<span class="keyword">Type</span><span class="operator">...</span>, <span class="params">migrationPlan</span>: (<span class="type">SchemaMigrationPlan</span>.<span class="keyword">Type</span>)<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">configurations</span>: <span class="type">ModelConfiguration</span>...) <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">for</span> <span class="params">givenSchema</span>: <span class="type">Schema</span>, <span class="params">migrationPlan</span>: (<span class="type">SchemaMigrationPlan</span>.<span class="keyword">Type</span>)<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">configurations</span>: <span class="type">ModelConfiguration</span>...) <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">for</span> <span class="params">givenSchema</span>: <span class="type">Schema</span>, <span class="params">migrationPlan</span>: (<span class="type">SchemaMigrationPlan</span>.<span class="keyword">Type</span>)<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">configurations</span>: [<span class="type">ModelConfiguration</span>]) <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">deleteAllData</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>schema: Schema我们可以理解成数据库中的Schema，同时也提到了能帮助迁移数据在不同的版本中<br>migrationPlan: (SchemaMigrationPlan.Type)? 描述架构的演变，以及如何在特定的版本中迁移数据<br>configurations: Set<ModelConfiguration>描述应用程序模式或特定模型组配置的类型。<br>在初始化方法中，我们可以重点关注这两个方法</ModelConfiguration></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">for</span> <span class="params">forTypes</span>: <span class="type">PersistentModel</span>.<span class="keyword">Type</span><span class="operator">...</span>, <span class="params">migrationPlan</span>: (<span class="type">SchemaMigrationPlan</span>.<span class="keyword">Type</span>)<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">configurations</span>: <span class="type">ModelConfiguration</span>...) <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">for</span> <span class="params">givenSchema</span>: <span class="type">Schema</span>, <span class="params">migrationPlan</span>: (<span class="type">SchemaMigrationPlan</span>.<span class="keyword">Type</span>)<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">configurations</span>: <span class="type">ModelConfiguration</span>...) <span class="keyword">throws</span></span><br></pre></td></tr></table></figure><p>他们提供的第一个参数 forTypes: PersistentModel.Type…其实就是通过@Model宏来定义的类类型<br>当然，我们也可以自定义一个Schema来告诉编译器，App的Schema是怎样的<br>两者都是一样的效果</p><h2 id="3-通过modelContext去修改数据"><a href="#3-通过modelContext去修改数据" class="headerlink" title="3. 通过modelContext去修改数据"></a>3. 通过modelContext去修改数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment(\.modelContext)</span> <span class="keyword">var</span> modelContext</span><br><span class="line"></span><br><span class="line">modelContext.insert(wubi)</span><br></pre></td></tr></table></figure><p>@Environment(.modelContext)是一个属性包装器，它的初始化方法如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">keyPath</span>: <span class="type">KeyPath</span>&lt;<span class="type">EnvironmentValues</span>, <span class="type">Value</span>&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过传入一个keyPath路径，来得到一个modelContext</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Available when SwiftUI is imported with SwiftData</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">EnvironmentValues</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The SwiftData model context that will be used for queries and other</span></span><br><span class="line">    <span class="comment">/// model operations within this environment.</span></span><br><span class="line">    <span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">17.0</span>, <span class="keyword">macOS</span> <span class="number">14.0</span>, <span class="keyword">tvOS</span> <span class="number">17.0</span>, <span class="keyword">watchOS</span> <span class="number">10.0</span>, <span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> modelContext: <span class="type">ModelContext</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的ModelContext定义如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// An object that enables you to fetch, insert, and delete models, and save any changes to disk.</span></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">swift</span> <span class="number">5.9</span>)</span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">macOS</span> <span class="number">14</span>, <span class="keyword">iOS</span> <span class="number">17</span>, <span class="keyword">tvOS</span> <span class="number">17</span>, <span class="keyword">watchOS</span> <span class="number">10</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelContext</span> : <span class="title class_">Equatable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> undoManager: <span class="type">UndoManager</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> insertedModelsArray: [<span class="type">PersistentModel</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> changedModelsArray: [<span class="type">PersistentModel</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> deletedModelsArray: [<span class="type">PersistentModel</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> container: <span class="type">ModelContainer</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> autosaveEnabled: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">container</span>: <span class="type">ModelContainer</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether two values are equal.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Equality is the inverse of inequality. For any values `a` and `b`,</span></span><br><span class="line">    <span class="comment">/// `a == b` implies that `a != b` is `false`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A value to compare.</span></span><br><span class="line">    <span class="comment">///   - rhs: Another value to compare.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">lhs</span>: <span class="type">ModelContext</span>, <span class="params">rhs</span>: <span class="type">ModelContext</span>) -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> hasChanges: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">model</span>(<span class="params">for</span> <span class="params">persistentModelID</span>: <span class="type">PersistentIdentifier</span>) -&gt; <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">registeredModel</span>&lt;<span class="type">T</span>&gt;(<span class="params">for</span> <span class="params">persistentModelID</span>: <span class="type">PersistentIdentifier</span>) -&gt; <span class="type">T</span>? <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">insert</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">model</span>: <span class="type">T</span>) <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">rollback</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">processPendingChanges</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">delete</span>&lt;<span class="type">T</span>&gt;(<span class="params">model</span>: <span class="type">T</span>.<span class="keyword">Type</span>, <span class="params">where</span> <span class="params">predicate</span>: <span class="type">Predicate</span>&lt;<span class="type">T</span>&gt;? <span class="operator">=</span> <span class="literal">nil</span>, <span class="params">includeSubclasses</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span>) <span class="keyword">throws</span> <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">delete</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">model</span>: <span class="type">T</span>) <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">transaction</span>(<span class="params">block</span>: () <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">save</span>() <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">enumerate</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">fetch</span>: <span class="type">FetchDescriptor</span>&lt;<span class="type">T</span>&gt;, <span class="params">batchSize</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="number">5000</span>, <span class="params">allowEscapingMutations</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>, <span class="params">block</span>: (<span class="keyword">_</span> model: <span class="type">T</span>) <span class="keyword">throws</span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span> <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">fetch</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">descriptor</span>: <span class="type">FetchDescriptor</span>&lt;<span class="type">T</span>&gt;) <span class="keyword">throws</span> -&gt; [<span class="type">T</span>] <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">fetchCount</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">descriptor</span>: <span class="type">FetchDescriptor</span>&lt;<span class="type">T</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">Int</span> <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">fetch</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">descriptor</span>: <span class="type">FetchDescriptor</span>&lt;<span class="type">T</span>&gt;, <span class="params">batchSize</span>: <span class="type">Int</span>) <span class="keyword">throws</span> -&gt; <span class="type">FetchResultsCollection</span>&lt;<span class="type">T</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">fetchIdentifiers</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">descriptor</span>: <span class="type">FetchDescriptor</span>&lt;<span class="type">T</span>&gt;) <span class="keyword">throws</span> -&gt; [<span class="type">PersistentIdentifier</span>] <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">fetchIdentifiers</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">descriptor</span>: <span class="type">FetchDescriptor</span>&lt;<span class="type">T</span>&gt;, <span class="params">batchSize</span>: <span class="type">Int</span>) <span class="keyword">throws</span> -&gt; <span class="type">FetchResultsCollection</span>&lt;<span class="type">PersistentIdentifier</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">PersistentModel</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> willSave: <span class="type">Notification</span>.<span class="type">Name</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> didSave: <span class="type">Notification</span>.<span class="type">Name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Describes the data in the user info dictionary of a notification sent by a model context.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">NotificationKey</span> : <span class="title class_">String</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// A token that indicates which generation of the model store SwiftData is using.</span></span><br><span class="line">        <span class="keyword">case</span> queryGeneration</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// A set of values identifying the context&#x27;s invalidated models.</span></span><br><span class="line">        <span class="keyword">case</span> invalidatedAllIdentifiers</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// A set of values identifying the context&#x27;s inserted models.</span></span><br><span class="line">        <span class="keyword">case</span> insertedIdentifiers</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// A set of values identifying the context&#x27;s updated models.</span></span><br><span class="line">        <span class="keyword">case</span> updatedIdentifiers</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// A set of values identifying the context&#x27;s deleted models.</span></span><br><span class="line">        <span class="keyword">case</span> deletedIdentifiers</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Creates a new instance with the specified raw value.</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">/// If there is no value of the type that corresponds with the specified raw</span></span><br><span class="line">        <span class="comment">/// value, this initializer returns `nil`. For example:</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">///     enum PaperSize: String &#123;</span></span><br><span class="line">        <span class="comment">///         case A4, A5, Letter, Legal</span></span><br><span class="line">        <span class="comment">///     &#125;</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">///     print(PaperSize(rawValue: &quot;Legal&quot;))</span></span><br><span class="line">        <span class="comment">///     // Prints &quot;Optional(&quot;PaperSize.Legal&quot;)&quot;</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">///     print(PaperSize(rawValue: &quot;Tabloid&quot;))</span></span><br><span class="line">        <span class="comment">///     // Prints &quot;nil&quot;</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">/// - Parameter rawValue: The raw value to use for the new instance.</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">init?</span>(<span class="params">rawValue</span>: <span class="type">String</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// The raw type that can be used to represent all values of the conforming</span></span><br><span class="line">        <span class="comment">/// type.</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">/// Every distinct value of the conforming type has a corresponding unique</span></span><br><span class="line">        <span class="comment">/// value of the `RawValue` type, but there may be values of the `RawValue`</span></span><br><span class="line">        <span class="comment">/// type that don&#x27;t have a corresponding value of the conforming type.</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">RawValue</span> <span class="operator">=</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// The corresponding value of the raw type.</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">/// A new instance initialized with `rawValue` will be equivalent to this</span></span><br><span class="line">        <span class="comment">/// instance. For example:</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">///     enum PaperSize: String &#123;</span></span><br><span class="line">        <span class="comment">///         case A4, A5, Letter, Legal</span></span><br><span class="line">        <span class="comment">///     &#125;</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">///     let selectedSize = PaperSize.Letter</span></span><br><span class="line">        <span class="comment">///     print(selectedSize.rawValue)</span></span><br><span class="line">        <span class="comment">///     // Prints &quot;Letter&quot;</span></span><br><span class="line">        <span class="comment">///</span></span><br><span class="line">        <span class="comment">///     print(selectedSize == PaperSize(rawValue: selectedSize.rawValue)!)</span></span><br><span class="line">        <span class="comment">///     // Prints &quot;true&quot;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">var</span> rawValue: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提供了对PersistentModel的CURD操作</p><h2 id="4-通过-Query去使用数据"><a href="#4-通过-Query去使用数据" class="headerlink" title="4. 通过@Query去使用数据"></a>4. 通过@Query去使用数据</h2><p>@Query是一个宏，我们可以用Xcode来展开代码，不过我在Xcode15.1中，展开代码遇到了问题，展开后有编译错误，可能要等Xcode来修复这个问题</p><p>回到正题，说一下@Query的用法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">struct</span> <span class="selector-tag">SearchHistoryView</span>: <span class="selector-tag">View</span> &#123;</span><br><span class="line">    <span class="variable">@Query</span> var <span class="attribute">historys</span>: [Wubi]</span><br><span class="line">    <span class="variable">@Binding</span> var <span class="attribute">selectionIndex</span>: String</span><br><span class="line"></span><br><span class="line">    var <span class="attribute">body</span>: some View &#123;</span><br><span class="line">        <span class="selector-tag">WubiListView</span>(<span class="attribute">selectionIndex</span>: $selectionIndex, <span class="attribute">wubis</span>: historys)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的这个用法中，我有疑问的地方是，我通过@Model定义的Wubi这个类，但是我@Query所使用的是[Wubi]这个数据，好像记得SwiftData会自动关联，这个问题还有待进一步查证。</p><h2 id="我在实际项目中遇到的问题是"><a href="#我在实际项目中遇到的问题是" class="headerlink" title="我在实际项目中遇到的问题是"></a>我在实际项目中遇到的问题是</h2><p>我有一个@Model的Class，但是会生成两个和两个不同的数据，如何分别去生成和使用</p><p>目前的猜测是不能，只有在同一个Model中去过滤不同的数据</p><h1 id="Swift-Data中的一些编程思想"><a href="#Swift-Data中的一些编程思想" class="headerlink" title="Swift Data中的一些编程思想"></a>Swift Data中的一些编程思想</h1><p>SwiftData是结合了两个技术的产物，CoreData的持久化技术和Swift的现代特性concurrency。<br>用最少的代码和无外部依赖性的方式为应用程序快速添加持久性。<br>通过宏来快速、高效和安全的编写代码，从而为你的App定义整个模型层。</p><p>除了在本地创建内容，SwiftData还有其它的用途。通过网络请求获取数据的App可以使用它来实现轻量级缓存机制，并提供有限的离线功能。</p><p>在设计上是非侵入性的，它是对App现有模型的补充。其实现的原理是通过两个协议来实现PersistentModel和Observable，PersistentModel主要是用来实现inline shechma,Observable主要是用来实现变化跟踪<br>SchemaMigrationPlan只有在自动迁移不了的情况下才需要出场。</p><p>Todo</p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://www.swiftyplace.com/blog/swiftdata-stack-understanding-containers">https://www.swiftyplace.com/blog/swiftdata-stack-understanding-containers</a><br><a href="https://www.hackingwithswift.com/books/ios-swiftui/relationships-with-swiftdata-swiftui-and-query">https://www.hackingwithswift.com/books/ios-swiftui/relationships-with-swiftdata-swiftui-and-query</a><br><a href="https://developer.apple.com/documentation/swiftdata">https://developer.apple.com/documentation/swiftdata</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SwiftData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List in SwiftUI</title>
      <link href="/2024/01/16/List-in-SwiftUI/"/>
      <url>/2024/01/16/List-in-SwiftUI/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Navigation in SwiftUI</title>
      <link href="/2024/01/16/Navigation-in-SwiftUI/"/>
      <url>/2024/01/16/Navigation-in-SwiftUI/</url>
      
        <content type="html"><![CDATA[<h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p>Enable people  to move between different parts of app’s view hierarchy within a scene.</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Use navigaiton containers to provide structure to your app’s user interface, enabling people to easily move among the parts of your app.</p><h2 id="NavigationStack"><a href="#NavigationStack" class="headerlink" title="NavigationStack"></a>NavigationStack</h2><h3 id="navigationSplitViewStyle"><a href="#navigationSplitViewStyle" class="headerlink" title="navigationSplitViewStyle(_:)"></a>navigationSplitViewStyle(_:)</h3><h3 id="navigationTitle"><a href="#navigationTitle" class="headerlink" title="navigationTitle(_:)"></a>navigationTitle(_:)</h3><h2 id="NavigationSplitView"><a href="#NavigationSplitView" class="headerlink" title="NavigationSplitView"></a>NavigationSplitView</h2><p>一种两列视图或者三列视图显示的视图，在前面的列选择可控制后面的列的显示</p><h3 id="版本限制"><a href="#版本限制" class="headerlink" title="版本限制"></a>版本限制</h3><p><code>iOS16.0+</code> <code>macOS 13.0+</code> <code>Mac Catalyst 16.0+</code> <code>tvOS 16.0+</code> <code>watchOS 9.0+</code> <code>visionOS 1.0+ Beta</code></p><h3 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义"></a>如何定义</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="type">NavigationSplitView</span>&lt;<span class="type">Sidebar</span>, Content, Detail&gt; <span class="built_in">where</span> Sidebar : <span class="built_in">View</span>, Contetn : <span class="built_in">View</span>, Detail : <span class="built_in">View</span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="创建一个-two-column-navigation-split-view-使用-init-sidebar-detail-来初始化"><a href="#创建一个-two-column-navigation-split-view-使用-init-sidebar-detail-来初始化" class="headerlink" title="创建一个 two-column navigation split view, 使用 ```init(sidebar: detail:) 来初始化"></a>创建一个 two-column navigation split view, 使用 ```init(sidebar: detail:) 来初始化</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@State <span class="keyword">private</span> var employeeIds: Set&lt;Employee.ID&gt; = <span class="literal">[]</span></span><br><span class="line"></span><br><span class="line">var body: some View &#123;</span><br><span class="line">    NavigationSplitView &#123;</span><br><span class="line">        <span class="constructor">List(<span class="params">model</span>.<span class="params">employees</span>, <span class="params">selection</span>: $<span class="params">employeeIds</span>)</span> &#123; employee <span class="keyword">in</span> </span><br><span class="line">            <span class="constructor">Text(<span class="params">employee</span>.<span class="params">name</span>)</span></span><br><span class="line">        &#125; detail: &#123;</span><br><span class="line">            <span class="constructor">EmployeeDetail(<span class="params">for</span>: <span class="params">employeeIds</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，第一列Sidebar是用List来返回，在List的selection中是传入的一个employeeIds参数，这时需要保证是唯一标识，这各UIKit/APPKit中的UITableView采用的Indexpath标记不同，这里会直接使用DataSource Model中的唯一标识，这就要要求我们数据必须遵循Identiable协议</p><h3 id="Control-column-visibility-如何控制列是否可见"><a href="#Control-column-visibility-如何控制列是否可见" class="headerlink" title="Control column visibility 如何控制列是否可见"></a>Control column visibility 如何控制列是否可见</h3><h3 id="Collapsed-split-views-折叠的拆分视图"><a href="#Collapsed-split-views-折叠的拆分视图" class="headerlink" title="Collapsed split views 折叠的拆分视图"></a>Collapsed split views 折叠的拆分视图</h3><h3 id="Customize-a-split-view"><a href="#Customize-a-split-view" class="headerlink" title="Customize a split view"></a>Customize a split view</h3><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>wwdc2022 <a href="https://developer.apple.com/wwdc22/10054">The SwiftUI cookbook for navigation</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bundle详解</title>
      <link href="/2024/01/16/Bundle%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/01/16/Bundle%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在macOS中如何用SwiftUI内嵌一个WebView来加载本地的一些html资源</title>
      <link href="/2024/01/15/%E5%9C%A8macOS%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%A8SwiftUI%E5%86%85%E5%B5%8C%E4%B8%80%E4%B8%AAWebView%E6%9D%A5%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%80%E4%BA%9Bhtml%E8%B5%84%E6%BA%90/"/>
      <url>/2024/01/15/%E5%9C%A8macOS%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%A8SwiftUI%E5%86%85%E5%B5%8C%E4%B8%80%E4%B8%AAWebView%E6%9D%A5%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%B8%80%E4%BA%9Bhtml%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>最近开发我的 <code>五笔助手 for macOS</code>的时候，想把一个开源的跟打器<a href="https://github.com/KyleBing/typepad">玫枫跟打器</a>嵌入到我的app中，这个app是用js+html编写的，整个界面设计得很漂亮，功能很比较完善。</p><p>但是在我集成的过程中，还是遇到了一些问题，现将整个过程记录下来：</p><h2 id="macOS-SwiftUI是否有原生的组件能支持我集成本地的web资源？"><a href="#macOS-SwiftUI是否有原生的组件能支持我集成本地的web资源？" class="headerlink" title="macOS SwiftUI是否有原生的组件能支持我集成本地的web资源？"></a>macOS SwiftUI是否有原生的组件能支持我集成本地的web资源？</h2><p>这是我找到的一些资料链接</p><ul><li>东坡肘子（最近很喜欢的一个开发者，写了很多的Swift/SwiftUI相关的文章，向他学习和致敬）：<br><a href="https://fatbobman.com/zh/posts/open_url_in_swiftui/#swiftui-30-ios-15monterey">在 SwiftUI 视图中打开 URL 的若干方法</a></li></ul><ul><li>Paul Hudson（非常出名的一个iOS技术分享博主，对我影响很大）:<br><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-open-web-links-in-safari">How to open web links in Safari</a></li></ul><p>他们都提到了SwiftUI中的Link组件，其中东坡肘子的文章还提到通过环境值openURL提供OpenURLAction处理代码的方式来实现自定义打开链接的行为，但是，这些都不符合我们的需求，我们是想用SwiftUI来内嵌一个webview，在webview中加载放在Bundle中的资源</p><h2 id="能否用WKWebview呢？"><a href="#能否用WKWebview呢？" class="headerlink" title="能否用WKWebview呢？"></a>能否用WKWebview呢？</h2><p><a href="https://github.com/kylehickinson/SwiftUI-WebView">https://github.com/kylehickinson/SwiftUI-WebView</a></p><p>采用这种方案，能加载首页的一些资源，但是效果没对</p><p>分析原因是我将html的文件夹之间互相访问的路径给改变了，导致在访问一些js，css的资源的时候报错了。<br>我们可以把这些资源打成一个bundle文件，来统一管理和保存，同时又不破坏其目录结构，从而不至于影响到他们之间的互相访问</p><p>代码可以这样写</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="module-access"><span class="module"><span class="identifier">Bundle</span>.</span></span>main.url(forResource: <span class="string">&quot;typepadBundle&quot;</span>, withExtension: <span class="string">&quot;bundle&quot;</span>),</span><br><span class="line">    <span class="keyword">let</span> bundle = <span class="constructor">Bundle(<span class="params">url</span>: <span class="params">url</span>)</span>,</span><br><span class="line">    <span class="keyword">let</span> path = bundle.path(forResource: <span class="string">&quot;index&quot;</span>, ofType: <span class="string">&quot;html&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="constructor">URL(<span class="params">filePath</span>: <span class="params">path</span>)</span></span><br><span class="line">            self.webViewStore.webView.load(<span class="constructor">URLRequest(<span class="params">url</span>: <span class="params">url</span>)</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>很想gap year</title>
      <link href="/2024/01/15/%E5%BE%88%E6%83%B3gap-year/"/>
      <url>/2024/01/15/%E5%BE%88%E6%83%B3gap-year/</url>
      
        <content type="html"><![CDATA[<p>不知不觉，2024后的1月已经过半。</p><p>很多计划都因为不自律而流失</p><p>自己最想改变的几件事</p><p>1.健康的身体</p><p>2.流利的英语</p><p>3.有被动收入</p><p>最自己最想做好的几方面，谈谈自己的一些思考：</p><p>1.关于健康的身体，最近走在路上，会暗自观察行人的精神状态，很羡慕那些精神面貌比较好的人，会给人一种很舒服的感觉。<br>如何才能让自己保持好的精神面貌，我觉得需要从几个方面下功夫</p><ul><li>休息，学会科学的休息</li><li>锻炼，养成习惯</li><li>吃，学习如何吃</li></ul><p>2.关于英语，语言了解这个世界最好的工具。</p><ul><li>保持慢的心态</li></ul><p>3.有被动收入</p><ul><li>能减少自己的焦虑</li></ul><ol start="4"><li>保持学习的态度</li></ol><h2 id="很讨厌上班的日子"><a href="#很讨厌上班的日子" class="headerlink" title="很讨厌上班的日子"></a>很讨厌上班的日子</h2><p>现在回想起来,上一次失业其实是一个很好的机会，在gap 3 moths的那段时间，学了自游泳，每天坚持健身。但是做错的一个决定是当时着急买了车。给自己增加了很大的经济上的压力，所以也不得不去着急去寻找下一份工作来解决经济上的压力。如果能重新去做选择，我可以会给自己一段时间，去探索独立开发这件事情，说不定现在也有一定的积累和收获了。</p><p>现在这家公司我不是很喜欢，国企单位，在公司来没有什么沉淀。工作上没什么压力，也没什么进步。说白了，是在里面混日子。唯一的一个好处是我有大把的时间来做自己想做的事情，但其实现在也是一事无成。但是也不要妄自菲薄。在这3年多的时间，经历了结婚，生小孩的事，一个不是很忙的工作，让我有精力去思考处理这些事情，中途做了两个外包工作，赚了一些外块，也是从这两次做外包痛苦的经历中，我更想去做自己的产品的想法。</p><p>曾经我觉得如果我想从一家公司离职，那么我会在这家公司做到最好，不留遗憾。现在我的想法改变了，如果这家公司的方向和企业文化和自己都不相同，那么也就没有在一起的必要了。在方向上都错了，还去努力，那只能说自己比较傻。</p><p>既然决定了，就全力以赴。</p><h2 id="最近的一些感悟"><a href="#最近的一些感悟" class="headerlink" title="最近的一些感悟"></a>最近的一些感悟</h2><p>昨天看一个比较有意思的分享，在对待孩子学习这件事情上，我们需要提前布局，比如查一下，教育部的教学大纲，从大的方向上来制定计划。</p><h2 id="最近的一些学习"><a href="#最近的一些学习" class="headerlink" title="最近的一些学习"></a>最近的一些学习</h2><p>周末看了figma的一个很基础的入门教学视频，还需要去落地实际操作。希望自己能从美学上严格要求自己，把自己的app做得非常简洁和漂亮。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>周末带孩子去了海昌极地海洋世界，老婆通过自己的热情，得到了亲吻海豚的机会，机会真的要自己去争取啊。<br>小孩最近吃手的问题，让我们两个大人都有点焦虑，我的焦虑是看到小区一个小孩在吃手，确实有点线面体面容。<br>准备看去香港的旅游攻略</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>key path in SwiftUI</title>
      <link href="/2024/01/08/key-path-in-SwiftUI/"/>
      <url>/2024/01/08/key-path-in-SwiftUI/</url>
      
        <content type="html"><![CDATA[<p>在SwiftUI中，经常看到一些反斜杠的一些用法</p><p>例如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.library) <span class="keyword">private</span> <span class="keyword">var</span> library</span><br></pre></td></tr></table></figure><h2 id="KeyPath"><a href="#KeyPath" class="headerlink" title="KeyPath"></a>KeyPath</h2><p>其中的反斜杠代表的是keypath,中文可以翻译成键路径，用于引用对象的属性而不是值本身。它们在很多方面类似于属性名的字符串，但是类型安全的，并且在编译时进行检查。</p><h2 id="使用反斜杠："><a href="#使用反斜杠：" class="headerlink" title="使用反斜杠："></a>使用反斜杠：</h2><p>在键路径表达式中，反斜杠 \ 用于指示接下来的部分是属性的名称。它标志着键路径的开始。例如，如果你有一个名为 <code>person</code> 的对象，且想引用它的 <code>name</code> 属性的键路径，你会写作 <code>\Person.name</code>。</p><h2 id="在Swfit-UI中"><a href="#在Swfit-UI中" class="headerlink" title="在Swfit UI中"></a>在Swfit UI中</h2><p>在SwiftUI中， <code>@Environment</code> 属性包装器允许你从环境中访问共享数据。例如，SwiftUI环境中包含了一些预定义的值，比如 <code>\.managedObjectContext</code> 用于CoreData。</p><h2 id="定制的环境值："><a href="#定制的环境值：" class="headerlink" title="定制的环境值："></a>定制的环境值：</h2><p><code>@Environment(\.library) private var library</code> library 表示访问环境中的一个特定值，这个值被标识为<code>library</code><br>这里的 \ 就是指明你正在引用一个环境中的键路径。这意味着在某处（通常在你的视图层次结构的更高级别）你必须已经将某些值放入环境中，并且这个值与 library 这个键相关联。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Environment Property Wrapper In SwiftUI</title>
      <link href="/2024/01/08/Environment%20Property%20Wrapper%20In%20SwiftUI/"/>
      <url>/2024/01/08/Environment%20Property%20Wrapper%20In%20SwiftUI/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Environment？"><a href="#什么是-Environment？" class="headerlink" title="什么是@Environment？"></a>什么是@Environment？</h2><p>A property wrapper that reads a value from a view’s environment<br>从视图的环境变量中读取一个属性包装的值</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Use the Environment property wrapper to read a value stored in a view’s environment.<br>Indicate the value to read using an <code>EnvironmnetValues</code> key path in the property declarations.<br>在属性声明中使用<code>EnvironmnetValues</code>键路径来指示要读取的值。</p><p>For example, you can create a property that reads the color scheme of the current view using the key path of the colorScheme property:<br>例如，你可以创建一个属性，使用colorScheme属性的键路径来读取当前视图的颜色方案：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.colorScheme) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span></span><br></pre></td></tr></table></figure><p>You can condition a view’s content on the associated value, which you read from the declared property’s wrappedValue. </p><p>As with any property wrapper, you access the wrapped value by directly referring to the property:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> colorScheme <span class="operator">==</span> .dark &#123;</span><br><span class="line">    <span class="type">DrarkContent</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">LightContent</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the value changes, SwiftUI updates any parts of your view that depend on the value. For example, that might happen in the above example<br>if the user Appeareance settings.<br>当某个值发生变化时，SwiftUI 会自动更新视图中依赖于这个值的所有部分。比如，在前述例子中，如果用户改变了他们的外观设置，这种更新就会发生。</p><p>You can use this property wrapper to read - but not set - an environment value. SwiftUI updates some environment values automatically based<br>on system settings and provides reasonable defaults for others. You can override some of these, as well as set custom environment vlaues that<br>you define, using the environments(<em>:</em>:) view modifier.<br>你可以利用这个属性包装器来读取（而非设定）一个环境值。SwiftUI 会根据系统设置自动更新一些环境值，并为其它值提供合适的默认设置。你可以通过使用 environments(::) 视图修饰符来覆盖部分环境值，或者设定你自己定义的环境值。</p><p>For the complete list of environment values provided by SwiftUI, see the properties of the <code>EnvironmentValues</code> structure. For information about<br>creating custom environment values, see the <code>EnvironmentKey</code> protocol.<br>如果想要查看 SwiftUI 提供的所有环境值，请参考 EnvironmentValues 结构体中的属性。关于如何创建自定义环境值，可以参见 EnvironmentKey 协议的相关信息。</p><h2 id="Get-an-observable-object"><a href="#Get-an-observable-object" class="headerlink" title="Get an observable object"></a>Get an observable object</h2><p>You can also use Environment to get an observable object from a view’s environment. The observable object must conform to the Observable protocol, and your app must set the object in environment using the object itself or a key path.<br>To see the object in the environment using the object itself, use the environment(<em>:) modifer:<br>你还可以利用 Environment 从视图的环境里提取一个可观察对象。这个对象必须遵循 Observable 协议，并且你的应用需要通过对象本身或其键路径来在环境中设置此对象。<br>为了通过对象本身在环境中观察这个对象，你可以使用 environment(</em>:) 修饰符：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Observable</span></span><br><span class="line"><span class="type">Class</span> <span class="type">Library</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> books: [<span class="type">Book</span>] <span class="operator">=</span> [<span class="type">Book</span>(), <span class="type">Book</span>(), <span class="type">Book</span>()]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> availableBooksCount: <span class="type">Int</span> &#123;</span><br><span class="line">        books.filter(\.isAvailable).count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BookReaderApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> library <span class="operator">=</span> <span class="type">Library</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">LibraryView</span>()</span><br><span class="line">            .environment(library)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To get the observable object using its type, create a property and provide the Environment property wrapper the object’s type:<br>要通过对象的类型来获取这个可观察对象，你需要先定义一个属性，然后为 Environment 的属性包装器指定这个对象的类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LibraryView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(<span class="type">Library</span>.<span class="keyword">self</span>) <span class="keyword">private</span> <span class="keyword">var</span> library</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By default, reading an object from the environment returns a non-optional object  when using the object type as the key. This  default behavior assumes that a view in the current hierarchy previously stored a non-optional instance of the type using the <code>environment(_:)</code> modifier. If a view attempts to retrieve an object using its type and that object isn’t in the environment, SwiftUI throws an exception.<br>默认情况下，若使用对象的类型作为键从环境中读取数据，会得到一个非可选类型的对象。这是基于一个假设：在当前的视图层级中，已经有视图使用 environment(_:) 修饰符存储了这种类型的非可选实例。如果视图试图通过类型来获取一个不存在于环境中的对象，SwiftUI 将会抛出异常。</p><p>In cases where is no guarantee that an object is in the environment, retrieve an optional version of the object as shown in the following code. If the object isn’t avaiable the environment, SwiftUI returns nil instead of throwing an exception.<br>在无法确保环境中存在某个对象的情况下，应该尝试获取该对象的可选版本，正如下面的代码展示的那样。这样做的话，如果环境中没有该对象，SwiftUI 将返回 nil，而不是抛出异常。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(<span class="type">Library</span>.<span class="keyword">self</span>) <span class="keyword">private</span> <span class="keyword">var</span> library: <span class="type">Library</span>?</span><br></pre></td></tr></table></figure><h2 id="Get-an-observable-object-using-a-key-path"><a href="#Get-an-observable-object-using-a-key-path" class="headerlink" title="Get an observable object using a key path"></a>Get an observable object using a key path</h2><p>To set the object with a key path, use the <code>environment(_:_:)</code> modifier:<br>要使用键路径来设置对象，可以应用 environment(<em>:</em>:) 修饰符：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Observable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Library</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> books: [<span class="type">Book</span>] <span class="operator">=</span> [<span class="type">Book</span>(), <span class="type">Book</span>(), <span class="type">Book</span>()]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> availableBooksCount: <span class="type">Int</span> &#123;</span><br><span class="line">        books.filter(\.isAvailable).count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BookReaderApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> library <span class="operator">=</span> <span class="type">Library</span>()</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">LibraryView</span>()</span><br><span class="line">            .environment(\.library, library)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To get the object, create a propery and specify the key path:<br>要取得对象，需先定义一个属性，然后明确指定键路径：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LibraryView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.library) <span class="keyword">private</span> <span class="keyword">var</span> library</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Meet SwiftData</title>
      <link href="/2024/01/03/Meet%20SwiftData/"/>
      <url>/2024/01/03/Meet%20SwiftData/</url>
      
        <content type="html"><![CDATA[<p>SwiftData is a powerful framework for data modeling and management and enhances your modern Swift app. Like SwiftUI, it focuses entirely on code with no external file formats and uses Swift’s new macro system to create a seamless API experience.</p><p>SwiftData 是一款强化现代 Swift 应用的强大数据建模和管理框架。它与 SwiftUI 类似，完全基于代码实现，不依赖任何外部文件格式，并利用 Swift 的全新宏系统，带来了流畅的 API 使用体验。</p><p>SwiftData relies on the expressivity provided by the new Swift language macros in order to create a seamless API experience. And it is naturally integrated with SwiftUI and works with other platform features, like CloudKit and Widgets. In this session, we’ll look at the new @Model macro and its power to model your data directly from Swift code, I’ll introduce you to fetching and modifying your data with SwiftData, then I’ll finish up by providing you with an overview of some of the other platform frameworks that work seamlessly with SwiftData.</p><p>SwiftData 的强大之处在于它利用 Swift 新引入的宏功能，实现了高度表达性和无缝集成的 API。它不仅与 SwiftUI 完美融合，还支持 CloudKit、Widgets 等其他平台特性。在本环节中，我会详细介绍新的 @Model 宏及其如何使你直接通过 Swift 代码进行数据建模的能力。接下来，我会带你了解如何使用 SwiftData 来获取和修改数据，并最后简要介绍一些与 SwiftData 无缝配合的其他平台框架。</p><p>Now we’ll look more into @Model.</p><p>下面，让我们深入了解一下 @Model 宏的魅力吧。</p><p>@Model is a new Swift macro that helps to define your model’s schema from your Swift code. SwiftData schemas are normal Swift code, but when needed, you can annotate your properties with additional metadata. Using this schema, SwiftData adds powerful functionality to your model objects. It’s as simple as decorating your class with @Model, and the schema is generated. Models in SwiftData are the source of truth for your application’s schema and drive the persistence experience. Part of this experience will transform the class’ stored properties and turns them into persisted properties. Adding @Model to your model opens up a world of possibilities. SwiftData natively adapts your value type properties to be used as attributes right away. These properties include basic value types, like string, int, and float. They can also include more complex value types, such as structs, enums, and codable types too, including collections. SwiftData models reference types as relationships. You can create links between your model types with relationships and collections of model types. @Model will modify all the stored properties on your type. You can influence how SwiftData builds your schema using metadata on your properties. With @Attribute, you can add uniqueness constraints. You can use @Relationship to control the choice of inverses and specify delete propagation rules. These change the behaviors of links between models. You can tell SwiftData not to include specific properties with the Transient macro. Here is our previous Trip example. I’ll adjust SwiftData’s schema generation by adding metadata to our stored properties.</p><p>@Model 是 Swift 新推出的一个宏，它能帮你直接在 Swift 代码中定义模型的结构。SwiftData 的结构本质上就是标准的 Swift 代码，不过你可以在必要时通过附加元数据来增强属性。借助这种结构，SwiftData 能为你的模型对象增添诸多强大功能。你只需简单地在类上使用 @Model 标记，模型结构就自动生成了。SwiftData 中的模型成为了应用程序结构的核心，也是驱动数据持久化的关键。其中的一部分功能会将类的存储属性转化为持久化属性。为模型添加 @Model 就意味着开启了无限可能。SwiftData 能自然地适应你的值类型属性，使它们立即成为可用属性。这些属性包括基础值类型如字符串（string）、整数（int）、浮点数（float），甚至还包括结构体、枚举和可编码类型，以及它们的集合。SwiftData 将模型中的引用类型视为关联关系。你可以通过关联关系和模型类型的集合来建立模型间的连接。@Model 会对你的类型中所有存储属性进行修改。你可以通过在属性上添加元数据来指导 SwiftData 如何构建模型结构。例如，使用 @Attribute 可以增加唯一性约束，而 @Relationship 则允许你控制反向关系的选择和删除规则的设定，从而改变模型间链接的行为。你还可以通过 Transient 宏来指示 SwiftData 忽略特定属性。以下是我们之前的 Trip 示例，我将通过给存储属性添加元数据来调整 SwiftData 的结构生成方式。</p><p>I can add @Attribute to name and specify that it should be unique. I can also decorate our bucket list relationship with @Relationship and instruct Swift Data to delete all the related bucket list items whenever this trip is deleted. To learn more about SwiftData modeling, check out the “Model your schema with SwiftData” session. Now I’ll cover how you can work with your model types and the two key objects you’ll use to drive your operations: SwiftData’s ModelContainer and ModelContext. The model container provides the persistent backend for your model types. You can use the default settings just by specifying your schema, or you can customize it with configurations and migration options. You can create a model container just by specifying the list of model types you want stored. If you want to customize your container further, you can use a configuration to change your URL, CloudKit and group container identifiers, and migration options With your container set up, you’re ready to fetch and save data with model contexts. You can also use SwiftUI’s view and scene modifiers to set up container and have it automatically established in the view’s environment. Model contexts observe all the changes to your models and provide many of the actions to operate on them. They are your interface to tracking updates, fetching data, saving changes, and even undoing those changes.</p><p>我可以给 name 属性添加 @Attribute 并指定其为唯一值。同样，我还可以用 @Relationship 修饰我们的“愿望清单”关系，并设置 Swift Data 在删除此行程时连同所有相关的愿望清单项一并删除。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trip</span> &#123;</span><br><span class="line">    <span class="meta">@Attribute</span>(.unique) <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> destination: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> endDate: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">var</span> startDate: <span class="type">Date</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Relationship</span>(.cascade) <span class="keyword">var</span> bucketList: [<span class="type">BucketListItem</span>]<span class="operator">?</span> <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> livingAccommodation: <span class="type">LivingAccommodation</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要深入了解 SwiftData 的建模，可以查阅“使用 SwiftData 建模你的架构”相关内容。接下来，我将介绍如何利用模型类型以及两个关键对象：SwiftData 的 ModelContainer 和 ModelContext，来推动操作。模型容器为你的模型类型提供了持久化的后端支持。你可以选择使用默认的架构设置，或者通过配置和迁移选项进行个性化定制。创建模型容器只需指定你希望存储的模型类型清单。如果你希望进一步自定义你的容器，可以通过配置改变 URL、CloudKit 和组容器标识符，以及迁移选项。一旦设置好容器，你就可以通过模型上下文来进行数据的获取和保存。你还可以利用 SwiftUI 的视图和场景修饰符设置容器，它会自动在视图的环境中建立起来。模型上下文会监控模型的所有变化，并提供许多操作功能，比如追踪更新、获取数据、保存更改，甚至撤销更改，它们是你与这些操作互动的接口。</p><p>Initalize a ModelContainer</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize with only a schema</span></span><br><span class="line"><span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ModelContainer</span>([<span class="type">Trip</span>.<span class="keyword">self</span>, <span class="type">LivingAccommodation</span>.<span class="keyword">self</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize with configurations</span></span><br><span class="line"><span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ModelContainer</span>(</span><br><span class="line">    for: [<span class="type">Trip</span>.<span class="keyword">self</span>, <span class="type">LivingAccommodation</span>.<span class="keyword">self</span>],</span><br><span class="line">    configurations: <span class="type">ModelConfiguration</span>(url: <span class="type">URL</span>(<span class="string">&quot;path&quot;</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Createing a model container in SwiftUI</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TripsApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .modelContainer(</span><br><span class="line">            for: [<span class="type">Trip</span>.<span class="keyword">self</span>, <span class="type">LivingAccommodation</span>.<span class="keyword">self</span>]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Accessing the environment’s ModelContext</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContextView</span> : <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.modelContext) <span class="keyword">private</span> <span class="keyword">var</span> context</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In SwiftUI, you’ll generally get the modelContext from your view’s environment after you create your model container.</p><p>在 SwiftUI 中，通常你会在创建模型容器后，从视图的环境中获得 modelContext。</p><p>Outside the view hierarchy, you can ask the model container to give you a shared main actor bound context, or you can simply instantiate new contexts for a given model container. Once you have a context, you’re ready to fetch data. SwiftData benefits from new Swift native types like predicate and fetch descriptor, as well as significant improvements to Swift’s native sort descriptor.</p><p>如果你在视图层级结构之外工作，可以要求模型容器提供一个共享的、绑定到主要 actor（执行者）的上下文，或者你也可以为特定模型容器创建新的上下文。一旦有了上下文，你就可以开始获取数据了。SwiftData 利用了 Swift 的新原生类型，如 predicate（谓词）和 fetch descriptor（抓取描述符），还有对 Swift 原生 sort descriptor（排序描述符）的重大改进，从而实现了更优的性能和功能。</p><p>New in iOS 17, predicate works with native Swift types and uses Swift macros for strongly typed construction. It’s a fully type checked modern replacement for NSPredicate. Implementing your predicates is easy, too, with Xcode support, like autocomplete. Here are a few examples of building predicates for our Sample Trip app. First, I can specify all the trips whose destination is New York. I can narrow our query down to just trips about birthdays, and I can specify we’re only interested in trips planned for the future, as opposed to any of our past adventures. Once we’ve decided which trips we’re interested in fetching, we can use the new FetchDescriptor type and instruct our ModelContext to fetch those trips. Working together with FetchDescriptor, Swift SortDescriptor is getting some updates to support native Swift types and keypaths, and we can use SortDescriptor to specify the order in which we’d like our fetched Trips to be organized. FetchDescriptor offers many other ways to tailor your SwiftData queries. In addition to predicates and sorting, you can specify related objects to prefetch, limiting the result count, excluding unsaved changes from the results, and much more. SwiftData also makes it easy to create, delete, and change your data by using the ModelContext to drive these operations. After creating your model objects like any other Swift classes, you can insert them into the context and begin using SwiftData features, like change tracking and persistence. Deleting persistent objects is as easy as telling the ModelContext to mark them for deletion, and you can save these and other pending changes by asking the ModelContext to save them and commit them to the persistent container. Changing property values on your model objects is as simple as using the property setters as you normally would. The Model macro modifies your stored properties to help the ModelContext track your changes automatically and include them in your next save operation.</p><p>在 iOS 17 中引入的新功能是，predicate 现在可以与 Swift 的原生类型配合使用，并利用 Swift 宏实现了强类型的构建方式，成为了 NSPredicate 的现代化、完全类型检查的替代品。借助 Xcode 的支持，例如自动补全功能，实现你的 predicates 变得简单易行。以下是我们示例 Trip 应用中构建 predicates 的几个例子。首先，我可以定义一个条件，筛选出所有目的地是纽约的行程。我还可以进一步缩小查询范围，只选择与生日相关的行程，并且指定我们只对未来的计划行程感兴趣，而不包括过去的冒险。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> today <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"><span class="keyword">let</span> tripPredicate <span class="operator">=</span> #<span class="type">Predicate</span>&lt;<span class="type">Trip</span>&gt; &#123;</span><br><span class="line">    <span class="variable">$0</span>.destination <span class="operator">==</span> <span class="string">&quot;New York&quot;</span> <span class="operator">&amp;&amp;</span></span><br><span class="line">    <span class="variable">$0</span>.name.contains(<span class="string">&quot;birthday&quot;</span>) <span class="operator">&amp;&amp;</span></span><br><span class="line">    <span class="variable">$0</span>.startDate <span class="operator">&gt;</span> today</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定了我们感兴趣的行程后，我们可以使用新的 FetchDescriptor 类型，指导 ModelContext 去抓取这些行程。FetchDescriptor 与正在更新中的 Swift SortDescriptor 协同工作，以支持 Swift 的原生类型和键路径（keypaths），我们可以利用 SortDescriptor 来指定我们想要的行程抓取结果的排序方式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> descriptor <span class="operator">=</span> <span class="type">FetchDescriptor</span>&lt;<span class="type">Trip</span>&gt;(</span><br><span class="line">    sortBy: <span class="type">SortDescriptor</span>(\<span class="type">Trip</span>.name),</span><br><span class="line">    predicate: tripPredicate</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> trips <span class="operator">=</span> <span class="keyword">try</span> context.fetch(descriptor)</span><br></pre></td></tr></table></figure><p>FetchDescriptor 还提供了其他多种方式来定制你的 SwiftData 查询，包括使用 predicates 和排序，指定预先抓取的相关对象，限制结果数量，排除未保存更改的结果等等。SwiftData 也简化了通过 ModelContext 来创建、删除和修改数据的过程。在像使用其他 Swift 类一样创建好模型对象后，你可以将它们加入上下文中，开始使用 SwiftData 的功能，比如变更跟踪和数据持久化。删除持久化对象就像告诉 ModelContext 标记它们为删除状态那样简单，你可以请求 ModelContext 保存这些以及其他待处理的更改，并提交到持久化容器中。在模型对象上更改属性值就像平时使用属性设置器那样简单。Model 宏会对你的存储属性进行修改，帮助 ModelContext 自动追踪这些更改，并将它们包括在下一次保存操作中。</p><p>To learn more about SwiftData containers and contexts and driving its operations, check out the “Dive Deeper into SwiftData” session. SwiftData was built with SwiftUI in mind, and using them together couldn’t be easier. SwiftUI is the easiest way to get started using SwiftData. Whether its setting up your SwiftData container, fetching data, or driving your view updates, we’ve built APIs directly integrating these frameworks. The new SwiftUI scene and view modifiers are the easiest way to get started building a SwiftData application. With SwiftUI, you can configure your data store, change your options, enable undo, and toggle autosaving. SwiftUI will propagate your model context in its environment. Once you’ve set up, the easiest way to start using your data is the new @Query property wrapper. You can easily load and filter anything stored in your database with a single line of code. SwiftData supports the all-new observable feature for your modeled properties. SwiftUI will automatically refresh changes on any of the observed properties. SwiftUI and SwiftData work hand in hand to help you build engaging and powerful apps. Learn more about using these frameworks together in our “Build an app with SwiftData” session.</p><p>想要深入了解 SwiftData 的容器和上下文以及如何操作它们，请参阅“深入了解 SwiftData”环节。SwiftData 是围绕 SwiftUI 设计的，两者的结合使用异常顺畅。SwiftUI 提供了一个最简便的途径来开始使用 SwiftData。无论是设置 SwiftData 容器、获取数据还是推动视图更新，我们都在这些框架中直接集成了相应的 API。利用新的 SwiftUI 场景和视图修饰符，你可以轻松地开始构建 SwiftData 应用。通过 SwiftUI，你不仅可以配置数据存储、更改设置、启用撤销功能、切换自动保存，还可以在其环境中传递模型上下文。一旦配置完成，利用新的 @Query 属性封装器开始使用数据将变得非常简单。你可以用一行代码就轻松加载和筛选数据库中的内容。SwiftData 还支持模型属性的全新可观察功能，SwiftUI 将自动更新所有观察到的属性变化。SwiftUI 和 SwiftData 的结合能够帮助你打造引人入胜且功能强大的应用。更多关于如何将这两个框架结合使用的信息，可以在我们的“使用 SwiftData 构建应用程序”环节中找到。</p><p>SwiftData is a powerful new solution to data management, designed with first-class support for Swift’s features. It uses Swift’s new macro system to focus entirely on your code. Set up your schema using @model, and configure your persistence experience with the model container. You can easily enable persistence, undo and redo, iCloud synchronization, widget development, and more. Start building SwiftData into your apps right away by leveraging SwiftUI’s seamless integration. We’re excited to see what you build with SwiftData, and thanks for watching.</p><p>SwiftData 是一个针对数据管理的强大新方案，它专门为充分利用 Swift 的特性而设计。它利用 Swift 的新宏系统，让你完全专注于编码。你可以使用 @model 来设定你的架构，并通过模型容器来定制持久化体验。你可以轻松实现数据持久化、撤销/重做操作、iCloud 同步、小部件开发等功能。通过利用 SwiftUI 的无缝集成，你可以立即开始在应用中使用 SwiftData。我们非常期待看到你使用 SwiftData 打造出的成果，感谢观看。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
